// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Thought       Thought[]
  template      Template[]

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Thought {
  id     String      @id @default(cuid())
  url    String
  bucket String      @default("thoughts")
  type   TypeEmotion @default(neutral)

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  create    DateTime @default(now()) @map("create")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("thoughts")
}

model Template {
  id      String  @id @default(cuid())
  title   String
  url     String
  bucket  String  @default("templates")
  default Boolean @default(false)

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("templates")
}

model SentimentAnalysis {
  id        String   @id @default(uuid())
  message   String   @db.Text()
  type      String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sentiment_analysis")
}

enum TypeEmotion {
  positive
  negative
  neutral
}
